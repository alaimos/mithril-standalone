package com.alaimos.Commons.Math.PValue;

import org.junit.Test;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertNotEquals;

/**
 * @author Salvatore Alaimo, Ph.D.
 * @version 2.0.0.0
 * @since 03/01/2016
 */
public class AdjustersTest {

    public static double[] p() {
        return new double[]{0.575155, 0.8179539, 0.1190654, 0.943789, 0.89713, 0.08633331, 0.6448587, 0.2058494,
                            0.4921755, 0.6558414, 0.2209214, 0.7189864, 0.6885884, 0.911868, 0.5783195, 0.07395153,
                            0.6185894, 0.04922736, 0.4830809, 0.636362, 0.2856, 0.8274487, 0.3048895, 0.4660682,
                            0.5319453, 0.1890796, 0.0001241481, 0.001613954, 0.06262239, 2.10159e-05, 0.0006114943,
                            0.006831909, 9.814783e-05, 0.000105261, 0.0001325988, 0.0002254557, 0.000379538, 0.00330243,
                            0.007059226, 0.008805129, 0.02115017, 0.005236997, 0.08281103, 2.354054e-07, 2.576842e-05,
                            0.06053298, 0.00940104, 0.01129798, 0.0001568503, 0.003538342};
    }

    @Test
    public void testBonferroni() throws Exception {
        double[] p = p(),
                e = new double[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                 0.006207404, 0.08069769, 1, 0.001050795, 0.03057472, 0.3415954, 0.004907392,
                                 0.005263048, 0.00662994, 0.01127279, 0.0189769, 0.1651215, 0.3529613, 0.4402564, 1,
                                 0.2618498, 1, 1.177027e-05, 0.001288421, 1, 0.470052, 0.564899, 0.007842517,
                                 0.1769171};
        assertArrayEquals(e, Adjusters.bonferroni(p), 0.0000001);
    }

    @Test
    public void testHolm() throws Exception {
        double[] p = p(),
                e = new double[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                 0.005586663, 0.0629442, 1, 0.001029779, 0.02445977, 0.2391168, 0.004612948,
                                 0.004842004, 0.005834347, 0.009469141, 0.01556106, 0.1254923, 0.2400137, 0.2905692,
                                 0.634505, 0.1885319, 1, 1.177027e-05, 0.001236884, 1, 0.3008333, 0.3502374,
                                 0.006744564, 0.1309186};
        assertArrayEquals(e, Adjusters.holm(p), 0.0000001);
    }

    @Test
    public void testHochberg() throws Exception {
        double[] p = p(),
                e = new double[]{0.943789, 0.943789, 0.943789, 0.943789, 0.943789, 0.943789, 0.943789, 0.943789,
                                 0.943789, 0.943789, 0.943789, 0.943789, 0.943789, 0.943789, 0.943789, 0.943789,
                                 0.943789, 0.943789, 0.943789, 0.943789, 0.943789, 0.943789, 0.943789, 0.943789,
                                 0.943789, 0.943789, 0.005586663, 0.0629442, 0.943789, 0.001029779, 0.02445977,
                                 0.2391168, 0.004612948, 0.004842004, 0.005834347, 0.009469141, 0.01556106, 0.1254923,
                                 0.2400137, 0.2905692, 0.634505, 0.1885319, 0.943789, 1.177027e-05, 0.001236884,
                                 0.943789, 0.3008333, 0.3502374, 0.006744564, 0.1309186};
        assertArrayEquals(e, Adjusters.hochberg(p), 0.0000001);
    }

    @Test
    public void testBenjaminiHochberg() throws Exception {
        double[] p = p(),
                e = new double[]{0.7414352, 0.8802645, 0.2126168, 0.943789, 0.9304775, 0.1598765, 0.7626063, 0.3430823,
                                 0.683577, 0.7626063, 0.3563248, 0.7988737, 0.7824868, 0.9304775, 0.7414352, 0.1479031,
                                 0.7626063, 0.1118804, 0.683577, 0.7626063, 0.4462501, 0.8802645, 0.4619538, 0.683577,
                                 0.718845, 0.3259994, 0.0009471343, 0.006724807, 0.1304633, 0.0004294736, 0.00277952,
                                 0.02076243, 0.0009471343, 0.0009471343, 0.0009471343, 0.001252532, 0.00189769,
                                 0.01263693, 0.02076243, 0.02445869, 0.05035754, 0.01745666, 0.159252, 1.177027e-05,
                                 0.0004294736, 0.1304633, 0.02473958, 0.02824495, 0.0009803146, 0.01263693};
        assertArrayEquals(e, Adjusters.benjaminiHochberg(p), 0.0000001);
    }

    @Test
    public void testBenjaminiYekutieli() throws Exception {
        double[] p = p(),
                e = new double[]{1, 1, 0.9566068, 1, 1, 0.7193172, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.6654462, 1, 0.5033728,
                                 1, 1, 1, 1, 1, 1, 1, 1, 0.004261352, 0.03025629, 0.5869813, 0.00193229, 0.01250563,
                                 0.09341443, 0.004261352, 0.004261352, 0.004261352, 0.005635398, 0.008538098,
                                 0.05685617, 0.09341443, 0.1100447, 0.2265689, 0.07854108, 0.7165074, 5.295685e-05,
                                 0.00193229, 0.5869813, 0.1113084, 0.1270798, 0.004410637, 0.05685617};
        assertArrayEquals(e, Adjusters.benjaminiYekutieli(p), 0.0000003);
    }

    @Test
    public void testNone() throws Exception {
        double[] p = p(),
                pp = Adjusters.none(p);
        assertNotEquals(p, pp);
        assertArrayEquals(p, pp, 0.0);
    }
}